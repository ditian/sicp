;-----
;2.62
;-----

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else (let ((head1 (car set1))
                    (head2 (car set2)))
                (cond ((= head1 head2) (cons head1 (union-set (cdr set1) (cdr set2))))
                      ((< head1 head2) (cons head1 (union-set (cdr set1) set2)))
                      (else (cons head2 (union-set set1 (cdr set2)))))))))

; tests
; > (union-set (list) (list))
; ()
; > (union-set (list) (list 1))
; (1)
; > (union-set (list) (list 1 2 3))
; (1 2 3)
; > (union-set (list 1) (list))
; (1)
; > (union-set (list 1 2) (list))
; (1 2)
; > (union-set (list 1) (list 1))
; (1)
; > (union-set (list 1) (list 1 2))
; (1 2)
; > (union-set (list 1 2) (list 1))
; (1 2)
; > (union-set (list 1 2) (list 1 3))
; (1 2 3)
; > (union-set (list 0 2) (list 1 3))
; (0 1 2 3)
; > (union-set (list 0 2) (list 2 3))
; (0 2 3)
; > (union-set (list 0 2) (list 1 2))
; (0 1 2)
; > (union-set (list 0 2 4 6) (list 1 3 5 7))
; (0 1 2 3 4 5 6 7)
; > (union-set (list 0 2 5 6) (list 1 3 5 7))
; (0 1 2 3 5 6 7)
; > (union-set (list 0 2 5 6) (list 2 3 5 7))
; (0 2 3 5 6 7)
; >
